// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //addressM
    Not(in=instruction[15], out=C);
    Mux16(a=M, b=instruction, sel=C, out=A);
    Or(a=C, b=instruction[5], out=loadA);
    ARegister(in=A, load=loadA, out=address, out[0..14]=addressM, out[0..13]=ad);
    //outM
    Mux(a=false, b=instruction[12], sel=instruction[15], out=selMux);
    Mux16(a=address, b=inM, sel=selMux, out=MorA);
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=M, load=loadD, out=D);
    And(a=instruction[11], b=instruction[15], out=zx);
    And(a=instruction[10], b=instruction[15], out=nx);
    Or(a=instruction[9], b=C, out=zy);
    Or(a=instruction[8], b=C, out=ny);
    And(a=instruction[7], b=instruction[15], out=f);
    And(a=instruction[6], b=instruction[15], out=no);
    ALU(x=D, y=MorA, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=M, out=outM, zr=zero, ng=negative);
    //writeM
    And(a=instruction[15], b=instruction[3], out=writeM);
    //pc
    Not(in=zero, out=Nzero);
    Not(in=negative, out=Nnegative);
    And(a=Nzero, b=Nnegative, out=positive);
    Or(a=zero, b=negative, out=zrORng);
    And(a=instruction[15], b=instruction[0], out=j1);
    And(a=instruction[15], b=instruction[1], out=j2);
    And(a=instruction[15], b=instruction[2], out=j3);
    Mux8Way(a=false, b=positive, c=zero, d=Nnegative, e=negative, f=Nzero, g=zrORng, h=true, 
        sel[0]=j1, sel[1]=j2, sel[2]=j3, out=jump);
    Not(in=jump, out=Njump);
    PC(in=address, load=jump, inc=Njump, reset=reset, out=opc, out[0..14]=pc);
}